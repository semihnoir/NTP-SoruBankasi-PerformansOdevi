<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AA74AAAO/AAADv8AAR7/wAce
</value>
  </data>
</root>